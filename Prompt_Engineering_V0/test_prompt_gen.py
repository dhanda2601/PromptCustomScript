import streamlit as st
from typing import List, Dict, Optional
from pathlib import Path

from prompt_gen.prompt_generator import PromptGenerator, PromptCategory
from config.constants import CONFIG_DIR

class StreamlitPromptTester:
    def __init__(self, prompt_generator):
        self.pg = prompt_generator
        self.default_help_text = self._get_default_help_text()

    def _get_default_help_text(self):
        return """
        # 🧠 Prompt Generator Tester - Help Guide

        This tool allows users to test and generate structured prompts for LLMs (Large Language Models) using predefined prompt templates, business rules, and categories. It provides dynamic input fields, prompt validation, and automatic prompt type suggestion.

        ## 🧹 Features Overview
        1. **🔎 Prompt Type Suggestion** - Auto-detect prompt type from your question.
        2. **𞷾 Prompt Selection** - Choose from categorized prompt templates.
        3. **✍️ Variable Input** - Dynamically fill variables required by each prompt.
        4. **🚀 Prompt Generation** - Generate full prompt based on input and template.
        5. **📋 Business Rule Validation** - Validate inputs against domain-specific rules.
        6. **📚 Rule Viewer** - See all available business rules in one place.

        ## 📥 Sidebar Configuration
        - **Filter by Category**: Select a category like General, Reasoning, Creative, etc.
        - **Select Prompts**: Multi-select prompt types with inline descriptions.

        ## 🧠 Prompt Variables
        - Automatically lists required variables per selected prompt.
        - Input boxes are labeled with variable name and usage frequency.

        ## 📘 Prompt Description + Examples
        - Shows the selected prompt type's category and description.
        - Collapsible expander displays example inputs and outputs.

        ## 🚀 Generate Prompt
        - Use the 'Generate Prompt' button to view a filled-in prompt in code box.
        - Ideal for testing templates or feeding into LLM APIs.

        ## 📋 Business Rules Validation
        - 'Test Against Rules' button validates inputs using `BusinessRules.json`.
        - Displays each failed rule with severity and explanation.
        - Checkbox allows browsing all rules with detailed metadata.

        ## 🦪 Prompt Categories (Default Tabs)
        - General, Reasoning, Creative, Technical, Analytical, Interactive

        ## ⚙️ Configuration Directory
        - `Prompts_Types.json` - Defines templates, variables, descriptions.
        - `BusinessRules.json` - Contains validation logic for fields.

        *Generated by the Prompt Generator App — April 2025*
        """

    def _suggest_prompt_type(self, question: str) -> Optional[str]:
        keywords = {
            "task": "Instruction-Based",
            "solve": "Chain-of-Thought",
            "analyze": "Analytical Reasoning",
            "reason": "Self-Consistency",
            "tool": "Automatic Reasoning and Tool-use (ART)",
            "retrieve": "Retrieval Augmented Generation (RAG)",
            "note": "Chain-of-Note",
            "symbol": "Chain-of-Symbol",
            "code": "Chain-of-Code",
            "python": "Chain-of-Code",
            "airflow": "Chain-of-Code",
            "dag": "Chain-of-Code",
            "logic": "Logical Chain-of-Thought",
            "emotion": "Emotion Prompting",
        }
        question_lower = question.lower()
        for keyword, ptype in keywords.items():
            if keyword in question_lower and ptype in self.pg.get_all_prompt_types():
                return ptype
        return None

    def render_ui(self):
        st.title("🧠 Prompt Generator Tester")
        with st.expander("📘 Help Guide (Click to Expand)", expanded=True):
            st.markdown(self.default_help_text)

        col1, col2 = st.columns([3, 1])
        with col1:
            suggested_prompt = self._render_keyword_suggestion()
            all_prompts = self.pg.get_all_prompt_types()
            selected_prompt = st.selectbox(
                "𞷾 Select Prompt Type",
                options=all_prompts,
                index=all_prompts.index(suggested_prompt) if suggested_prompt and suggested_prompt in all_prompts else 0,
                format_func=lambda x: f"{x} - {self.pg.get_prompt_info(x)['description'][:50]}..."
            )
            info = self.pg.get_prompt_info(selected_prompt)
            if info:
                st.markdown(f"**Category:** `{info['category']}`")
                st.caption(f"📘 {info['description']}")
                if info.get("examples"):
                    with st.expander("🔍 View Examples", expanded=False):
                        for ex in info["examples"]:
                            st.markdown(f"🔵 **Input**: `{ex['input']}`")
                            st.markdown(f"🔶 **Output**: `{ex['output']}`")
                            st.divider()

            st.subheader("✍️ Fill Prompt Variables")
            variable_inputs = {}
            for var in info["input_variables"]:
                default_val = self._get_default_example_value(var)
                input_func = st.text_area if var in ["code_problem", "requirements"] else st.text_input
                variable_inputs[var] = input_func(f"Value for `{var}`", value=default_val, key=f"var_{var}")

            st.subheader("🚀 Generate Prompt")
            if st.button("▶ Generate Prompt Now", type="primary"):
                if selected_prompt == "Chain-of-Code":
                    prompt_template = f"""
                    You are an expert in {variable_inputs.get('language', 'Python')} programming.\n
                    Please solve the following coding problem:\n
                    Problem: {variable_inputs.get('code_problem', '')}\n
                    Requirements:\n                    - {variable_inputs.get('requirements', '')}\n                    - Include comments explaining key steps\n                    - Make the solution production-ready\n
                    Please provide:\n                    1. The complete code solution\n                    2. Brief explanation of the key components\n                    3. Any assumptions you made
                    """
                    st.code(prompt_template, language="markdown")
                else:
                    prompt = self.pg.generate_prompt(selected_prompt, variable_inputs)
                    st.code(prompt, language="markdown") if prompt else st.error("Could not generate the prompt.")

        with col2:
            with st.expander("⚙️ Configuration", expanded=True):
                categories = self.pg.get_prompt_categories()
                selected_category = st.selectbox("Select category", [c[0] for c in categories],
                                                 format_func=lambda x: next(c[1] for c in categories if c[0] == x))
                self.selected_category = PromptCategory[selected_category]
                available_prompts = self.pg.get_all_prompt_types(self.selected_category)
                self.selected_prompts = st.multiselect("Choose prompts to test", options=available_prompts,
                                                       default=available_prompts[:2] if len(available_prompts) > 1 else available_prompts)

            with st.expander("📋 Business Rules", expanded=True):
                if st.button("🧪 Validate Inputs", type="secondary"):
                    relevant_rules = [r for r in self.pg.get_business_rules() if r.field in info["input_variables"]]
                    validation = self.pg.validate_with_rules(variable_inputs, relevant_rules)
                    if validation:
                        st.error("Some rules failed:")
                        for field, errs in validation.items():
                            for err in errs:
                                st.error(f"🔹 `{field}`: {err}")
                    else:
                        st.success("All rules passed!")

                if st.checkbox("📓 Show Relevant Rules"):
                    for rule in self.pg.get_business_rules():
                        if rule.field in info["input_variables"]:
                            st.markdown(f"- **{rule.name}** (`{rule.field}`): `{rule.rule_type}` expected `{rule.expected_value}` ({rule.severity})")
                            if rule.description:
                                st.caption(rule.description)
                            st.divider()

    def _render_keyword_suggestion(self):
        st.subheader("🔎 Type Your Prompt Idea")
        user_question = st.text_input("What do you want the model to do?", key="question_input")
        if user_question:
            return self._suggest_prompt_type(user_question)
        return None

    def _get_default_example_value(self, var: str) -> str:
        defaults = {
            "code_problem": "Create an Apache Airflow DAG that runs daily at 8 AM, processes data from a CSV, and loads to PostgreSQL.",
            "language": "Python",
            "requirements": "Use Python 3.8+, Airflow 2.5+, include error handling",
            "complexity_level": "Intermediate",
            "task": "Explain quantum computing in simple terms",
            "problem": "Solve for x: 2x + 5 = 15",
            "input": "Given examples, classify the following input:",
            "question": "What are the main causes of climate change?"
        }
        return defaults.get(var, "")

# App launch
if __name__ == "__main__":
    try:
        pg = PromptGenerator(CONFIG_DIR)
        app = StreamlitPromptTester(pg)
        app.render_ui()
    except Exception as e:
        st.error(f"App failed to initialize: {str(e)}")
